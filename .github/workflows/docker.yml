name: 'Build basic docker images'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: 0 7 * * THU
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs: {}

jobs:
  build-docker-images:
    name: 'Build ${{ matrix.image.name }} docker image'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        image:
          - name: mariadb
            context: ./mariadb
            target: ''
            version: ''
            build-args: ''
          - name: mariadb
            context: ./mariadb
            target: ''
            version: ''
            file: 10.6.dockerfile
            build-args: ''
          - name: mariadb
            context: ./mariadb
            target: ''
            version: ''
            file: 10.11.dockerfile
            build-args: ''
          - name: mysql
            context: ./mysql
            target: ''
            version: ''
            build-args: ''
          - name: mysql
            context: ./mysql
            target: ''
            version: ''
            file: 8.0.dockerfile
            build-args: ''
          - name: postgres
            context: ./postgres
            target: ''
            version: ''
            build-args: ''
          - name: postgres
            context: ./postgres
            target: ''
            version: ''
            file: 14.dockerfile
            build-args: ''
          - name: postgres
            context: ./postgres
            target: ''
            version: ''
            file: 12.dockerfile
            build-args: ''
          - name: rabbitmq
            context: ./rabbitmq
            target: ''
            version: ''
            build-args: ''
          - name: redis
            context: ./redis
            target: ''
            version: ''
            build-args: ''
          - name: solr
            context: ./solr
            target: ''
            version: ''
            build-args: ''
          - name: solr
            context: ./solr
            target: ''
            version: ''
            file: 8.dockerfile
            build-args: ''
          - name: varnish
            context: ./varnish
            target: ''
            version: ''
            build-args: ''
          - name: elasticsearch
            context: ./elasticsearch
            target: ''
            version: ''
            build-args: ''
          - name: webserver-neos
            context: ./webserver
            target: 'webserver-neos'
            version: ''
            build-args: ''
          - name: webserver-typo3
            context: ./webserver
            target: 'webserver-typo3'
            version: ''
            build-args: ''
          - name: webserver-shopware
            context: ./webserver
            target: 'webserver-shopware'
            version: ''
            build-args: ''
          - name: webserver-shopware6
            context: ./webserver
            target: 'webserver-shopware6'
            version: ''
            build-args: ''
          - name: webserver-static
            context: ./webserver
            target: 'webserver-static'
            version: ''
            build-args: ''
          - name: webserver-symfony
            context: ./webserver
            target: 'webserver-symfony'
            version: ''
            build-args: ''
          - name: prettier
            context: ./prettier
            target: 'prettier'
            version: 'stable'
            build-args: ''
          - name: mailpit
            context: ./mailpit
            target: 'mailpit'
            version: ''
            build-args: ''
          - name: cfssl
            context: ./cfssl
            target: 'cfssl'
            version: '1.6'
            build-args: ''
          - name: cfssl-server
            context: ./cfssl
            target: 'cfssl-server'
            version: '1.6'
            build-args: ''
          - name: tideways-daemon
            context: ./tideways-daemon
            target: 'tideways-daemon'
            version: ''
            build-args: ''
          - name: prometheus-apache-exporter
            context: ./prometheus-apache-exporter
            target: 'prometheus-apache-exporter'
            version: '1.0.6'
            build-args: ''
          - name: prometheus-elasticsearch-exporter
            context: ./prometheus-elasticsearch-exporter
            target: 'prometheus-elasticsearch-exporter'
            version: '1.7.0'
            build-args: ''
          - name: prometheus-nginx-exporter
            context: ./prometheus-nginx-exporter
            target: 'prometheus-nginx-exporter'
            version: '1.1.0'
            build-args: ''
          - name: prometheus-php-fpm-exporter
            context: ./prometheus-php-fpm-exporter
            target: 'prometheus-php-fpm-exporter'
            version: '2.2.0'
            build-args: ''
          - name: prometheus-postgres-exporter
            context: ./prometheus-postgres-exporter
            target: 'prometheus-postgres-exporter'
            version: '0.15.0'
            build-args: ''
          - name: prometheus-redis-exporter
            context: ./prometheus-redis-exporter
            target: 'prometheus-redis-exporter'
            version: ''
            build-args: ''
          - name: prometheus-solr-exporter
            context: ./prometheus-solr-exporter
            target: 'prometheus-solr-exporter'
            version: ''
            build-args: ''
          - name: prometheus-varnish-exporter
            context: ./prometheus-varnish-exporter
            target: 'prometheus-varnish-exporter'
            version: '1.6.1'
            build-args: ''
          - name: node
            context: ./node
            target: 'node'
            version: 18
            build-args: |
              NODE_VERSION=18
          - name: node
            context: ./node
            target: 'node'
            version: 20
            build-args: |
              NODE_VERSION=20

    env:
      DOCKER_IMAGE: ghcr.io/netlogix/docker/${{ matrix.image.name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Read version from Dockerfile or matrix
        id: docker
        run: echo "version=$(./extract-version.sh ${{ matrix.image.context }}/${{ matrix.image.file || 'Dockerfile' }} ${{ matrix.image.version }})" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push to GHCR
        id: docker_build_push
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ matrix.image.context }}
          target: ${{ matrix.image.target }}
          file: ${{ matrix.image.context }}/${{ matrix.image.file || 'Dockerfile' }}
          build-args: ${{ matrix.image.build-args }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_IMAGE }}:latest,${{ env.DOCKER_IMAGE }}:${{ steps.docker.outputs.version }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha, scope=${{ matrix.image.name }}-${{ steps.docker.outputs.version }}
          cache-to: type=gha, scope=${{ matrix.image.name }}-${{ steps.docker.outputs.version }}, mode=max

